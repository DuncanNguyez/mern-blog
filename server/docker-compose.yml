version: "3"
services:
  mongodb:
    container_name: ${MONGO_HOST}
    image: mongo:7.0.14
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - blog-mongodb:/data/db
    ports:
      - "27018:${MONGO_PORT}"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - blog-network

  redis:
    container_name: ${REDIS_HOST}
    image: redis:7.4.0
    ports:
      - "6380:${REDIS_PORT}"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - blog-network

  elasticsearch:
    container_name: ${ELS_NODE_HOST}
    image: elasticsearch:8.15.0
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      ES_JAVA_OPTS: -Xms1g -Xmx1g
    # deploy:
    #   resources:
    #     limits:
    #       memory: 2GB
    
    volumes:
      - blog-els:/usr/share/elasticsearch/data
    ports:
      - "9201:${ELS_NODE_PORT}"
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - blog-network
  app:
    container_name: blog-app
    build:
      context: .
      dockerfile: dockerfile
    image: ${DOCKER_HUB_USER}/blog-app:1.0
    ports:
      - 3001:3000
    networks:
      - blog-network
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
networks:
  blog-network:
volumes:
  blog-mongodb:
  blog-els:
